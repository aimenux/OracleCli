using System.Text;
using App.Services.Oracle;
using Humanizer;

namespace App.Services.Exporters;

public class CSharpExporter : ICSharpExporter
{
    public string ExportOracleArguments(ICollection<OracleArgument> oracleArguments, OracleParameters parameters)
    {
        var fullname = GetCSharpProcedureFullName(parameters);
        var csharpBuilder = new StringBuilder
        (
            $$"""
            // code generated by oracle-cli at {{DateTime.Now:F}}

            [OracleProperty("{{fullname}}")]
            public class OracleProcedure
            {
                {{GetCSharpArguments(oracleArguments)}}                
            }

            """
        );

        csharpBuilder.AppendLine($"{GetCSharpCursorClasses(oracleArguments)}");

        csharpBuilder.AppendLine
        (
            """
            public class OraclePropertyAttribute : Attribute
            {
                public string Name { get; }

                public OraclePropertyAttribute(string name)
                {
                    Name = name;
                }
            }
            """
        );

        return csharpBuilder.ToString();
    }
    
    private static string GetCSharpCursorClasses(IEnumerable<OracleArgument> oracleArguments)
    {
        var csharpBuilder = new StringBuilder();
        
        foreach (var oracleArgument in oracleArguments.Where(x => x.IsCursorType))
        {
            var cursorClassType = GetCSharpCursorType(oracleArgument);
            csharpBuilder.AppendLine();
            csharpBuilder.AppendLine
            (
                $$"""
                public class {{cursorClassType}}
                {
                    // cursor properties generation is not supported currently by oracle-cli
                }
                """
            );
        }

        return csharpBuilder.ToString();
    }

    private static string GetCSharpArguments(IEnumerable<OracleArgument> oracleArguments)
    {
        var csharpBuilder = new StringBuilder();
        
        foreach (var oracleArgument in oracleArguments)
        {
            var name = GetCSharpName(oracleArgument);
            var type = GetCSharpType(oracleArgument);
            csharpBuilder.AppendLine();
            csharpBuilder.AppendLine
            (
                $$"""
                    [OracleProperty("{{oracleArgument.Name}}")]
                    public {{type}} {{name}} { get; set; }
                """
            );
        }

        return csharpBuilder.ToString();
    }

    private static string GetCSharpName(OracleArgument oracleArgument)
    {
        return oracleArgument.Name.Transform(To.LowerCase).Pascalize();
    }

    private static string GetCSharpType(OracleArgument oracleArgument)
    {
        return oracleArgument.DataType.ToUpper() switch
        {
            "NUMBER" => "long",
            "VARCHAR" => "string",
            "VARCHAR2" => "string",
            "DATE" => "DateTime",
            "REF CURSOR" => GetCSharpCursorType(oracleArgument),
            _ => "NotSupportedType"
        };
    }

    private static string GetCSharpCursorType(OracleArgument oracleArgument)
    {
        return $"IEnumerable<OracleCursor{oracleArgument.Position}>";
    }

    private static string GetCSharpProcedureFullName(OracleParameters parameters)
    {
        var schemaName = parameters.OwnerName.ToUpper();
        var pkgName = parameters.PackageName?.ToUpper();
        var spcName = parameters.ProcedureName.ToUpper();
        return string.IsNullOrWhiteSpace(pkgName) 
            ? $"{schemaName}.{spcName}" 
            : $"{schemaName}.{pkgName}.{spcName}";
    }
}