using System.Text;
using App.Services.Oracle;
using Humanizer;

namespace App.Services.Exporters;

public class CSharpExportService : ICSharpExportService
{
    private readonly ITextExportService _textExportService;

    public CSharpExportService(ITextExportService textExportService)
    {
        _textExportService = textExportService ?? throw new ArgumentNullException(nameof(textExportService));
    }

    public async Task ExportOracleParametersAsync(ICollection<OracleParameter> oracleParameters, OracleArgs oracleArgs, CancellationToken cancellationToken)
    {
        var name = GetCSharpName(oracleArgs);
        var type = GetCSharpType(oracleArgs);

        var csharpBuilder = new StringBuilder
        (
            $$"""
            // code generated by oracle-cli at {{DateTime.Now:F}}

            [OracleProperty("{{name}}")]
            public class {{type}}
            {
                {{GetCSharpParameters(oracleParameters)}}                
            }

            """
        );

        csharpBuilder.AppendLine($"{GetCSharpCursorClasses(oracleParameters)}");

        csharpBuilder.AppendLine
        (
            """
            public class OraclePropertyAttribute : Attribute
            {
                public string Name { get; }

                public OraclePropertyAttribute(string name)
                {
                    Name = name;
                }
            }
            """
        );

        var csharpText = csharpBuilder.ToString();
        await _textExportService.ExportToClipboardAsync(csharpText, cancellationToken);
    }
    
    private static string GetCSharpCursorClasses(IEnumerable<OracleParameter> oracleParameters)
    {
        var csharpBuilder = new StringBuilder();
        
        foreach (var oracleParameter in oracleParameters.Where(x => x.IsCursorType))
        {
            var cursorClassType = GetCSharpParameterCursorType(oracleParameter);
            csharpBuilder.AppendLine();
            csharpBuilder.AppendLine
            (
                $$"""
                public class {{cursorClassType}}
                {
                    // cursor properties generation is not supported currently by oracle-cli
                }
                """
            );
        }

        return csharpBuilder.ToString();
    }

    private static string GetCSharpParameters(IEnumerable<OracleParameter> oracleParameters)
    {
        var csharpBuilder = new StringBuilder();
        
        foreach (var oracleParameter in oracleParameters)
        {
            var name = GetCSharpParameterName(oracleParameter);
            var type = GetCSharpParameterType(oracleParameter);
            csharpBuilder.AppendLine();
            csharpBuilder.AppendLine
            (
                $$"""
                    [OracleProperty("{{oracleParameter.Name}}")]
                    public {{type}} {{name}} { get; set; }
                """
            );
        }

        return csharpBuilder.ToString();
    }

    private static string GetCSharpParameterName(OracleParameter oracleParameter)
    {
        var name = string.IsNullOrWhiteSpace(oracleParameter.Name)
            ? $"{oracleParameter.Direction}{oracleParameter.Position}"
            : oracleParameter.Name;
        
        return name.Transform(To.LowerCase).Pascalize();
    }

    private static string GetCSharpParameterType(OracleParameter oracleParameter)
    {
        return oracleParameter.DataType.ToUpper() switch
        {
            "NUMBER" => "long",
            "VARCHAR" => "string",
            "VARCHAR2" => "string",
            "DATE" => "DateTime",
            "REF CURSOR" => GetCSharpParameterCursorType(oracleParameter),
            _ => "NotSupportedType"
        };
    }

    private static string GetCSharpParameterCursorType(OracleParameter oracleParameter)
    {
        return $"IEnumerable<OracleCursor{oracleParameter.Position}>";
    }

    private static string GetCSharpName(OracleArgs oracleArgs)
    {
        var schemaName = oracleArgs.SchemaName.ToUpper();
        var pkgName = oracleArgs.PackageName?.ToUpper();
        var spcName = oracleArgs.ProcedureName?.ToUpper();
        var funName = oracleArgs.FunctionName?.ToUpper();
        var prgName = spcName ?? funName;
        return string.IsNullOrWhiteSpace(pkgName) 
            ? $"{schemaName}.{prgName}" 
            : $"{schemaName}.{pkgName}.{prgName}";
    }
    
    private static string GetCSharpType(OracleArgs oracleArgs)
    {
        return string.IsNullOrWhiteSpace(oracleArgs.FunctionName)
            ? "OracleProcedure"
            : "OracleFunction";
    }
}